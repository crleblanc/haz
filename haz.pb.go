// Code generated by protoc-gen-go.
// source: haz.proto
// DO NOT EDIT!

/*
Package haz is a generated protocol buffer package.

It is generated from these files:
	haz.proto

It has these top-level messages:
	Quake
	Timestamp
	Quakes
	Volcano
	VAL
	Volcanoes
	MMI
	Shaking
*/
package haz

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Quake is for earthquake information.
type Quake struct {
	// the unique public identifier for this quake.
	PublicID string `protobuf:"bytes,1,opt,name=public_iD,json=publicID" json:"public_iD,omitempty"`
	// the origin time of the quake.
	Time *Timestamp `protobuf:"bytes,2,opt,name=time" json:"time,omitempty"`
	// the modification time of the quake information.
	ModificationTime *Timestamp `protobuf:"bytes,3,opt,name=modification_time,json=modificationTime" json:"modification_time,omitempty"`
	// latitude of the quake location.
	Latitude float64 `protobuf:"fixed64,4,opt,name=latitude" json:"latitude,omitempty"`
	// longitude of the quake location.
	Longitude float64 `protobuf:"fixed64,5,opt,name=longitude" json:"longitude,omitempty"`
	// the depth of the quake in km.
	Depth float64 `protobuf:"fixed64,6,opt,name=depth" json:"depth,omitempty"`
	// magnitude of the quake.
	Magnitude float64 `protobuf:"fixed64,7,opt,name=magnitude" json:"magnitude,omitempty"`
	// distance and direction to the nearest locality.
	Locality string `protobuf:"bytes,8,opt,name=locality" json:"locality,omitempty"`
	// the quality of this information; `best`, `good`, `caution`, `deleted`.
	Quality string `protobuf:"bytes,9,opt,name=quality" json:"quality,omitempty"`
	// the calculated MMI shaking at the closest locality in the New Zealand region.
	Mmi int32 `protobuf:"varint,10,opt,name=mmi" json:"mmi,omitempty"`
}

func (m *Quake) Reset()                    { *m = Quake{} }
func (m *Quake) String() string            { return proto.CompactTextString(m) }
func (*Quake) ProtoMessage()               {}
func (*Quake) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Quake) GetTime() *Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *Quake) GetModificationTime() *Timestamp {
	if m != nil {
		return m.ModificationTime
	}
	return nil
}

// Timestamp for encoding time stamps.
type Timestamp struct {
	// Unix time in seconds
	Sec int64 `protobuf:"varint,1,opt,name=sec" json:"sec,omitempty"`
	// Fractional part of time in nanoseconds.
	Nsec int64 `protobuf:"varint,2,opt,name=nsec" json:"nsec,omitempty"`
}

func (m *Timestamp) Reset()                    { *m = Timestamp{} }
func (m *Timestamp) String() string            { return proto.CompactTextString(m) }
func (*Timestamp) ProtoMessage()               {}
func (*Timestamp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Quakes struct {
	Quakes []*Quake `protobuf:"bytes,1,rep,name=quakes" json:"quakes,omitempty"`
}

func (m *Quakes) Reset()                    { *m = Quakes{} }
func (m *Quakes) String() string            { return proto.CompactTextString(m) }
func (*Quakes) ProtoMessage()               {}
func (*Quakes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Quakes) GetQuakes() []*Quake {
	if m != nil {
		return m.Quakes
	}
	return nil
}

type Volcano struct {
	// a unique identifier for the volcano.
	VolcanoID string `protobuf:"bytes,1,opt,name=volcano_iD,json=volcanoID" json:"volcano_iD,omitempty"`
	// the volcano title.
	Title string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	// latitude of the volcano.
	Latitude float64 `protobuf:"fixed64,3,opt,name=latitude" json:"latitude,omitempty"`
	// longitude of the volcano.
	Longitude float64 `protobuf:"fixed64,4,opt,name=longitude" json:"longitude,omitempty"`
	Val       *VAL    `protobuf:"bytes,5,opt,name=val" json:"val,omitempty"`
}

func (m *Volcano) Reset()                    { *m = Volcano{} }
func (m *Volcano) String() string            { return proto.CompactTextString(m) }
func (*Volcano) ProtoMessage()               {}
func (*Volcano) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Volcano) GetVal() *VAL {
	if m != nil {
		return m.Val
	}
	return nil
}

// volcanic alert level.
type VAL struct {
	Level    int32  `protobuf:"varint,1,opt,name=level" json:"level,omitempty"`
	Activity string `protobuf:"bytes,2,opt,name=activity" json:"activity,omitempty"`
	Hazards  string `protobuf:"bytes,3,opt,name=hazards" json:"hazards,omitempty"`
}

func (m *VAL) Reset()                    { *m = VAL{} }
func (m *VAL) String() string            { return proto.CompactTextString(m) }
func (*VAL) ProtoMessage()               {}
func (*VAL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type Volcanoes struct {
	Volcanoes []*Volcano `protobuf:"bytes,1,rep,name=volcanoes" json:"volcanoes,omitempty"`
}

func (m *Volcanoes) Reset()                    { *m = Volcanoes{} }
func (m *Volcanoes) String() string            { return proto.CompactTextString(m) }
func (*Volcanoes) ProtoMessage()               {}
func (*Volcanoes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Volcanoes) GetVolcanoes() []*Volcano {
	if m != nil {
		return m.Volcanoes
	}
	return nil
}

type MMI struct {
	// latitude of the mmi.
	Latitude float64 `protobuf:"fixed64,1,opt,name=latitude" json:"latitude,omitempty"`
	// longitude of the mmi.
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude" json:"longitude,omitempty"`
	// the mmi at the location.  Currently the max mmi.
	Mmi int32 `protobuf:"varint,3,opt,name=mmi" json:"mmi,omitempty"`
	// count of mmi values at the location.
	Count int32 `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
}

func (m *MMI) Reset()                    { *m = MMI{} }
func (m *MMI) String() string            { return proto.CompactTextString(m) }
func (*MMI) ProtoMessage()               {}
func (*MMI) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type Shaking struct {
	Mmi        []*MMI          `protobuf:"bytes,1,rep,name=mmi" json:"mmi,omitempty"`
	MmiSummary map[int32]int32 `protobuf:"bytes,2,rep,name=mmi_summary,json=mmiSummary" json:"mmi_summary,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MmiTotal   int32           `protobuf:"varint,3,opt,name=mmi_total,json=mmiTotal" json:"mmi_total,omitempty"`
}

func (m *Shaking) Reset()                    { *m = Shaking{} }
func (m *Shaking) String() string            { return proto.CompactTextString(m) }
func (*Shaking) ProtoMessage()               {}
func (*Shaking) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Shaking) GetMmi() []*MMI {
	if m != nil {
		return m.Mmi
	}
	return nil
}

func (m *Shaking) GetMmiSummary() map[int32]int32 {
	if m != nil {
		return m.MmiSummary
	}
	return nil
}

func init() {
	proto.RegisterType((*Quake)(nil), "haz.Quake")
	proto.RegisterType((*Timestamp)(nil), "haz.Timestamp")
	proto.RegisterType((*Quakes)(nil), "haz.Quakes")
	proto.RegisterType((*Volcano)(nil), "haz.Volcano")
	proto.RegisterType((*VAL)(nil), "haz.VAL")
	proto.RegisterType((*Volcanoes)(nil), "haz.Volcanoes")
	proto.RegisterType((*MMI)(nil), "haz.MMI")
	proto.RegisterType((*Shaking)(nil), "haz.Shaking")
}

func init() { proto.RegisterFile("haz.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 530 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x95, 0xe3, 0x38, 0x8d, 0x27, 0x08, 0xca, 0x8a, 0x83, 0x15, 0x8a, 0x84, 0x7c, 0x42, 0x08,
	0x45, 0xa2, 0x1c, 0x40, 0xa0, 0x1e, 0x40, 0xe5, 0x50, 0x89, 0x1c, 0xba, 0xad, 0x7a, 0xe0, 0x12,
	0x6d, 0x1d, 0x93, 0xac, 0x62, 0x7b, 0xd3, 0x64, 0x1d, 0x29, 0xfc, 0x0e, 0xfe, 0x0d, 0x17, 0x7e,
	0x1a, 0xf3, 0xe1, 0x38, 0x34, 0x42, 0x3d, 0x65, 0xde, 0x9b, 0x7d, 0xde, 0x37, 0x6f, 0xb4, 0x81,
	0x78, 0x6e, 0x7e, 0x8e, 0x96, 0x2b, 0xe7, 0x9d, 0x0a, 0xb1, 0x4c, 0x7f, 0x77, 0x20, 0xba, 0xac,
	0xcd, 0x22, 0x57, 0xcf, 0x21, 0x5e, 0xd6, 0xb7, 0x85, 0xcd, 0x26, 0xf6, 0x3c, 0x09, 0x5e, 0x06,
	0xaf, 0x62, 0xdd, 0x17, 0xe2, 0xe2, 0x5c, 0xa5, 0xd0, 0xf5, 0xb6, 0xcc, 0x93, 0x0e, 0xf2, 0x83,
	0xd3, 0xc7, 0x23, 0xfa, 0xca, 0x35, 0x12, 0x6b, 0x6f, 0xca, 0xa5, 0xe6, 0x9e, 0xfa, 0x04, 0x4f,
	0x4b, 0x37, 0xb5, 0x3f, 0x6c, 0x66, 0xbc, 0x75, 0xd5, 0x84, 0x05, 0xe1, 0x7f, 0x05, 0xc7, 0xff,
	0x1e, 0x24, 0x5a, 0x0d, 0xa1, 0x5f, 0x20, 0xf2, 0xf5, 0x34, 0x4f, 0xba, 0xa8, 0x09, 0x74, 0x8b,
	0xd5, 0x09, 0xc4, 0x85, 0xab, 0x66, 0xd2, 0x8c, 0xb8, 0xb9, 0x27, 0xd4, 0x33, 0x88, 0xa6, 0xf9,
	0xd2, 0xcf, 0x93, 0x1e, 0x77, 0x04, 0x90, 0xa6, 0x34, 0xb3, 0x4a, 0x34, 0x47, 0xa2, 0x69, 0x09,
	0xbe, 0xcd, 0x65, 0xa6, 0xb0, 0x7e, 0x9b, 0xf4, 0x65, 0xd4, 0x1d, 0x56, 0x09, 0x1c, 0xdd, 0xd5,
	0xd2, 0x8a, 0xb9, 0xb5, 0x83, 0xea, 0x18, 0xc2, 0xb2, 0xb4, 0x09, 0x20, 0x1b, 0x69, 0x2a, 0xd3,
	0xb7, 0x10, 0xb7, 0x43, 0x51, 0x7b, 0x9d, 0x67, 0x1c, 0x5d, 0xa8, 0xa9, 0x54, 0x0a, 0xba, 0x15,
	0x51, 0x1d, 0xa6, 0xb8, 0x4e, 0xdf, 0x40, 0x8f, 0xf3, 0x5e, 0x63, 0xa6, 0xbd, 0x3b, 0xae, 0x50,
	0x12, 0x62, 0x48, 0xc0, 0x21, 0x71, 0x53, 0x37, 0x9d, 0xf4, 0x57, 0x00, 0x47, 0x37, 0xae, 0xc8,
	0x4c, 0xe5, 0xd4, 0x0b, 0x80, 0x8d, 0x94, 0xfb, 0x0d, 0xc5, 0x0d, 0x83, 0x2b, 0xc2, 0x1c, 0x30,
	0xaf, 0x42, 0x76, 0x14, 0x6b, 0x01, 0xf7, 0x72, 0x0d, 0x1f, 0xca, 0xb5, 0x7b, 0x98, 0xeb, 0x10,
	0xc2, 0x8d, 0x29, 0x38, 0xef, 0xc1, 0x69, 0x9f, 0xbd, 0xdd, 0x7c, 0xfe, 0xa6, 0x89, 0x4c, 0x2f,
	0x21, 0xc4, 0x9a, 0xae, 0x2c, 0xf2, 0x4d, 0x5e, 0xb0, 0x99, 0x48, 0x0b, 0xa0, 0x2b, 0x4d, 0xe6,
	0xed, 0x86, 0x12, 0x14, 0x2f, 0x2d, 0xa6, 0x70, 0xf1, 0x43, 0x66, 0x35, 0x5d, 0xb3, 0x1b, 0x0c,
	0xb7, 0x81, 0xe9, 0x7b, 0x88, 0x9b, 0x41, 0x31, 0x9a, 0xd7, 0xb0, 0x1b, 0xac, 0x4d, 0xe7, 0x91,
	0x38, 0x10, 0x56, 0xef, 0xdb, 0xe9, 0x0c, 0xc2, 0xf1, 0xf8, 0xe2, 0xde, 0xa0, 0xc1, 0x43, 0x83,
	0x76, 0x0e, 0x07, 0x6d, 0xd6, 0x1a, 0xb6, 0x6b, 0xa5, 0xb9, 0x32, 0x57, 0x57, 0x9e, 0x43, 0xc1,
	0xb9, 0x18, 0xa4, 0x7f, 0x70, 0x17, 0x57, 0x73, 0xb3, 0xb0, 0xd5, 0x8c, 0xc2, 0x21, 0x8d, 0x58,
	0x93, 0x70, 0xd0, 0x84, 0xa8, 0xcf, 0x60, 0x80, 0x3f, 0x93, 0x75, 0x5d, 0x96, 0x66, 0x45, 0x11,
	0xd0, 0x99, 0x13, 0x3e, 0xd3, 0xc8, 0x47, 0xe3, 0xd2, 0x5e, 0x49, 0xfb, 0x6b, 0xe5, 0x57, 0x5b,
	0x0d, 0x65, 0x4b, 0xd0, 0x3b, 0x24, 0xb9, 0x77, 0x1e, 0xd3, 0x17, 0x53, 0x7d, 0x24, 0xae, 0x09,
	0x0f, 0xcf, 0xe0, 0xc9, 0x81, 0x96, 0xec, 0x2f, 0xf2, 0x6d, 0xb3, 0x02, 0x2a, 0xc9, 0x3e, 0x2e,
	0xa9, 0x96, 0x51, 0xd1, 0x3e, 0x83, 0x8f, 0x9d, 0x0f, 0xc1, 0x97, 0xe8, 0x3b, 0x3d, 0xfa, 0xdb,
	0x1e, 0xff, 0x01, 0xbc, 0xfb, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x48, 0x67, 0x56, 0x32, 0x0d, 0x04,
	0x00, 0x00,
}
